from main import bot, dp
from aiogram.types import Message # aiogram
from aiogram import types   # aiogram
from configuration import admin_id, url, connectBD # –ú–æ–π –∫–æ–Ω—Ñ–∏–≥
import keyboards as kb # –ö–Ω–ø–æ–∫–∏
from lxml import etree # –î–ª—è –ø–∞—Ä—Å–∏–Ω–∫–∞ –≤–∞–ª—é—Ç
import requests 
from weather import classweather # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
#import psycopg2 # –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–¥
from Query import Scripts # –°–∫—Ä–∏–ø—Ç—ã –≤ –±–¥
from mykinopoisk import jekaFilm # –∞–ø–∏ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞

# FSM
#from typing import Optional
#import aiogram.utils.markdown as md
from aiogram import  Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
#from aiogram.utils import executor
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
# States
class Form(StatesGroup):
    film_name = State()  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
    task_name = State()  # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î
connect = connectBD.func_connect_bd()
cursor = connect.cursor()

# –ö–æ–º–º–∞–Ω–ª–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])

async def start_MainKeyboard(message: Message):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    cursor = connect.cursor()
    
    people_id = message.chat.id
    cursor.execute (f"SELECT User_id from users where User_id = {people_id}")
    data = cursor.fetchone()    
    if data is None:
    # –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º!             
        user_id = message.chat.id
        user_name = message.from_user.first_name
        with connect.cursor() as cursor:
            cursor.execute("INSERT INTO users (User_id,User_name) VALUES(%s,%s);",(user_id,user_name))
            connect.commit()

    text = "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: </b>"
    await bot.send_message(message.from_user.id,text=text,
                        reply_markup=kb.MainKeyboard)

##callback_query_handler –ø–µ—Ä–µ—Ö–≤–∞—Ç –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data == 'MainKeyboard')
async def MainKeyboard_func(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>', reply_markup=kb.MainKeyboard)

@dp.callback_query_handler(lambda c: c.data == 'keyExchange')
async def keyExchange_func(callback_query: types.CallbackQuery):
    #await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text('<b>–ö—É—Ä—Å –≤–∞–ª—é—Ç:</b>', reply_markup=kb.keyExchange)

@dp.callback_query_handler(lambda c: c.data == 'keyUSD')
async def keyUSD_func(callback_query: types.CallbackQuery):
    xml_response = etree.fromstring(requests.get('http://www.cbr.ru/scripts/XML_daily.asp').text.encode("1251"))
    curs = xml_response.find("Valute[@ID='R01235']/Value").text
    await callback_query.message.edit_text(text = f"1 –¥–æ–ª–ª–∞—Ä {curs} —Ä—É–±–ª–µ–π", reply_markup=kb.keyUSD)

@dp.callback_query_handler(lambda c: c.data == 'keyEUR')
async def keyUSD_func(callback_query: types.CallbackQuery):
    xml_response = etree.fromstring(requests.get('http://www.cbr.ru/scripts/XML_daily.asp').text.encode("1251"))
    curs = xml_response.find("Valute[@ID='R01239']/Value").text
    await callback_query.message.edit_text(text = f"1 e–≤—Ä–æ {curs} —Ä—É–±–ª–µ–π", reply_markup=kb.keyEUR)
    
@dp.callback_query_handler(lambda c: c.data == 'keyWeather')
async def keyWeather_func(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('<b>–ü–æ–≥–æ–¥–∞:</b>', reply_markup=kb.keyWeather)

@dp.callback_query_handler(lambda c: c.data == 'weather')
async def weather_func(callback_query: types.CallbackQuery):
    text = classweather.get_weather()
    await callback_query.message.edit_text(text=text, reply_markup=kb.Weather)

@dp.callback_query_handler(lambda c: c.data == 'keyFilms')
async def keyFilms_func(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='<b>–§–∏–ª—å–º—ã:</b>', reply_markup=kb.keyFilms)


@dp.callback_query_handler(lambda c: c.data == 'SearchFilms')
async def SearchFilms_func(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='<b>–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞:</b>', reply_markup=kb.SearchFilms)

@dp.callback_query_handler(lambda c: c.data == 'watchthis')
async def Swatchthis_func(callback_query: types.CallbackQuery):
            cursor = connect.cursor()
            people_id = callback_query.from_user.id
            cursor.execute (f"SELECT User_id from filmsfavorites where User_id = {people_id}")
            data = cursor.fetchone()    
            if data is None:#–µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π 
                await callback_query.message.edit_text(text='<b>–§–∏–ª—å–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:</b>', reply_markup=kb.filmfavorites)
            else:
                text = Scripts.select_favoritefilms(people_id)
                await callback_query.message.edit_text(text=text, reply_markup=kb.filmfavorites)

@dp.callback_query_handler(lambda c: c.data == 'addfavorites')
async def addfavorites_func(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑–≤—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /addfavoritefilm')
    #await bot.send_message( "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑–≤—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /addfavoritefilm",chat_id=message.from_user.id)

@dp.callback_query_handler(lambda c: c.data == 'keyTasks')
async def keyTasks_func(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='<b>–ó–∞–¥–∞—á–∏:</b>', reply_markup=kb.keyTasks)

@dp.callback_query_handler(lambda c: c.data == 'keySQL')
async def keySQLfunc(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='<b>SQL:</b>', reply_markup=kb.keySQL)

@dp.callback_query_handler(lambda c: c.data == 'keyFunction')
async def keyFunction_func(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='<b>–§—É–Ω–∫—Ü–∏—è —ç—Ç–æ...</b>', reply_markup=kb.keyFunction)

@dp.callback_query_handler(lambda c: c.data == 'keyList')
async def keyList_func(callback_query: types.CallbackQuery):
        #–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cursor = connect.cursor()
            people_id = callback_query.from_user.id
            cursor.execute (f"SELECT User_id from todo_list where User_id = {people_id}")
            data = cursor.fetchone()    
            if data is None:#–µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π 
                await callback_query.message.edit_text(text='<b>–ó–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üóí</b>', reply_markup=kb.keyList)
                print(people_id)
            else:#–µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Scripts.all_tasks()
                text = Scripts.all_tasks(people_id)
                await callback_query.message.edit_text(text=text, reply_markup=kb.keyList)
                print(people_id)

@dp.callback_query_handler(lambda c: c.data == 'FindName')                               
async def FindName_Func(callback_query: types.CallbackQuery):
    text = jekaFilm.go_film()
    await callback_query.message.edit_text(text=text, reply_markup=kb.FindName)

@dp.callback_query_handler(lambda c: c.data == 'keyAdd')
async def keyAddFunc(callback_query: types.CallbackQuery): 
    await callback_query.message.edit_text(text="–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑–≤—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /addtask")


@dp.callback_query_handler(lambda c: c.data == 'keyDelete')
async def keyDelete_Func(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏?\n–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏'
    , reply_markup=kb.keyDelete)


@dp.callback_query_handler(lambda c: c.data == 'keydeletealltasks')
async def keydeletealltasksFunc(callback_query: types.CallbackQuery):
    people_id = callback_query.from_user.id
    Scripts.Delete_all_tasks(people_id) # –≤—ã–∑–æ–≤ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    await callback_query.message.edit_text(text='–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã ‚úÖ', reply_markup=kb.keydeletealltasks)


@dp.message_handler(commands=['getfilm'])
async def command_weather(message: types.Message):
    people_id = message.from_user.id
    await bot.send_message(message.from_user.id,text =  jekaFilm.go_film(people_id))

@dp.message_handler(commands=['deletefavorites'])
async def command_weather(message: types.Message):
    people_id = message.from_user.id
    Scripts.delete_all_favorites(people_id)
    await bot.send_message(message.from_user.id,text ='–í—Å–µ —Ñ–∏–ª—å–º—ã —É–¥–∞–ª–µ–Ω—ã ‚úÖ')

##fsm
@dp.message_handler(commands=['addfavoritefilm'])
async def cmd_start(message: types.Message):
    # Set state –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
    await Form.film_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")

@dp.message_handler(state=Form.film_name)
async def process_name(message: types.Message, state: FSMContext):
    # –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ 
    async with state.proxy() as data:
        data['film_name'] = message.text

        # And send message
        await bot.send_message(message.chat.id, "–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ",reply_markup=kb.filmfavorites)
        user_id = message.chat.id
        name = data['film_name']
        Scripts.add_favoritefilm(name,user_id)#–≤—ã–∑—ã–≤–∞–µ–º INSERT –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        #await bot.send_message(message.chat.id, md.text(md.text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', md.bold(data['name'])),sep='\n'), reply_markup=kb.MainKeyboard)

        # Finish conversation
        data.state = None

#mfsm
@dp.message_handler(commands=['addtask'])
async def cmd_start(message: types.Message):
    # Set state –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
    await Form.task_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@dp.message_handler(state=Form.task_name)
async def process_name(message: types.Message, state: FSMContext):
    # –ü—Ä–æ—Ü–µ—Å—Å –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    async with state.proxy() as data:
        data['task_name'] = message.text

        # And send message
        await bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ",reply_markup=kb.keydeletealltasks)
        user_id = message.chat.id
        name_film = data['task_name']
        Scripts.add_task(name_film,user_id)#–≤—ã–∑—ã–≤–∞–µ–º INSERT –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        #await bot.send_message(message.chat.id, md.text(md.text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', md.bold(data['name'])),sep='\n'), reply_markup=kb.MainKeyboard)
        # Finish conversation
        data.state = None

